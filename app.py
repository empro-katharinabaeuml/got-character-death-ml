import os
import pickle
import pandas as pd
import streamlit as st

# === Seitenstruktur ===
image_pages = {
    "Feature Importance": ("feature_importance.png", "Welche Merkmale haben den gr√∂√üten Einfluss auf die Vorhersage?"),
    "Confusion Matrix": ("heatmap.png", "Tats√§chlich vs. Vorhergesagt: Wie gut unterscheidet das Modell zwischen Tot und Lebendig?"),
    "ROC-Kurve": ("roc.png", "Bewertet die Modellg√ºte √ºber verschiedene Schwellen. AUC = Fl√§che unter der Kurve."),
    "√úberlebenswahrscheinlichkeit Histogramm": ("survival_probability_hist.png", "Wie sicher ist sich das Modell bei der Prognose?"),
    "√úberleben nach Geschlecht": ("survival_by_gender.png", "Vergleich zwischen m√§nnlichen und weiblichen Charakteren."),
    "√úberleben nach Adel": ("survival_by_nobility.png", "Haben Adelige bessere Chancen?"),
    "√úberleben nach Alter (Histogramm)": ("survival_by_age.png", "Welche Altersgruppen √ºberleben am h√§ufigsten?"),
    "√úberleben toter Verwandter": ("survival_has_dead_relatives.png", "Einfluss toter Verwandter auf √úberlebenschance."),
    "√úberleben Heirat": ("survival_by_isMarried.png", "Verheiratete vs. Unverheiratete."),
    "Klassenverteilung": ("klassenverteilung.png", "Wie viele leben? Wie viele sind tot?"),
    "Partial Dependence Plot (PDP)": ("partial_dependence.png", "Einfluss einzelner Features auf die Vorhersage."),
    "Kumulative Feature-Wichtigkeit": ("kumulative-feature-wichtigkeit.png", "Wie viel erkl√§rt man mit wenigen Features?"),
    "Korrelation zwischen Features": ("feature-korrelationen.png", "Zusammenh√§nge zwischen Features erkennen."),
    "Beispielbaum aus dem Random Forest": ("random_forest1.png", "Wie trifft das Modell Entscheidungen?"),
    "Charaktertypen (Cluster)": ("cluster.png", "Cluster von Figuren nach √§hnlichen Eigenschaften."),
    "√úberleben nach Haus": ("survival_by_house.png", "Gibt es H√§user mit besonders hoher oder niedriger √úberlebensrate?"),
    "Einf√ºhrungskapitel vs. √úberleben": ("intro_chapter_vs_survival.png", "H√§ngt der Zeitpunkt der Einf√ºhrung mit dem √úberleben zusammen?"),
    "t-SNE Tot vs. Lebendig": ("tsne_survival.png", "Verteilung von Figuren im Merkmalsraum ‚Äì trennt das Modell Tot und Lebendig?")

}

slug_to_title = {
    "vorhersage": "√úberlebenschance",
    "feature-importance": "Feature Importance",
    "confusion-matrix": "Confusion Matrix",
    "roc-kurve": "ROC-Kurve",
    "histogramm": "√úberlebenswahrscheinlichkeit Histogramm",
    "geschlecht": "√úberleben nach Geschlecht",
    "adel": "√úberleben nach Adel",
    "alter": "√úberleben nach Alter (Histogramm)",
    "tote-verwandte": "√úberleben toter Verwandter",
    "heirat": "√úberleben Heirat",
    "klassenverteilung": "Klassenverteilung",
    "pdp": "Partial Dependence Plot (PDP)",
    "kumulative-wichtigkeit": "Kumulative Feature-Wichtigkeit",
    "korrelation": "Korrelation zwischen Features",
    "baum": "Beispielbaum aus dem Random Forest",
    "cluster": "Charaktertypen (Cluster)",
    "haus": "√úberleben nach Haus",
    "intro": "Einf√ºhrungskapitel vs. √úberleben",
    "tsne": "t-SNE Tot vs. Lebendig"
}
title_to_slug = {v: k for k, v in slug_to_title.items()}

# === Konfiguration ===
st.set_page_config(page_title="GoT Dashboard", layout="wide")
st.title("Game of Thrones Modell-Dashboard")

st.markdown("""
<style>
.card {
    background-color: #1e1e1e;
    border-radius: 15px;
    padding: 1rem;
    height: 350px;            
    display: flex;
    flex-direction: column;
    justify-content: space-between;  
    margin-bottom: 0.5rem;
}

.card img {
    width: 100%;
    height: 180px;
    object-fit: contain;
    border-radius: 4px;
}

.card .card-body {
    flex-grow: 1;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
}
.card-title {
    font-weight: bold;
    margin-top: 0.5rem;
}
.card-caption {
    font-size: 0.9rem;
    color: #aaa;
    flex-grow: 1;
}
</style>
""", unsafe_allow_html=True)


# === Hilfsfunktionen ===
def show_saved_image(filename, width=None):
    filepath = os.path.join("public/pictures", filename)
    if os.path.exists(filepath):
        st.image(filepath, width=width)
    else:
        st.warning(f"Bild nicht gefunden: {filename}")

def load_model_and_features():
    with open("model.pkl", "rb") as f:
        model = pickle.load(f)
    with open("feature_columns.pkl", "rb") as f:
        features = pickle.load(f)
    return model, features

import base64

def get_image_base64(path):
    try:
        with open(path, "rb") as f:
            data = f.read()
        return base64.b64encode(data).decode("utf-8")
    except:
        return None

# === Modell & Features global laden ===
model, feature_names = load_model_and_features()


# === Seitenlogik ===
query_params = st.query_params
current_page = query_params.get("page", None)

if current_page is None:
    st.subheader("√úbersicht aller Modell-Visualisierungen")
    st.markdown("### Visualisierungsgalerie")
    
    cols = st.columns(3)

    for i, (title, (img, desc)) in enumerate(image_pages.items()):
        slug = title_to_slug.get(title, None)
        if slug:
            with cols[i % 3]:
                img_path = os.path.join("public/pictures", img)
                img_data = get_image_base64(img_path)

                if img_data:
                    img_html = f'<img src="data:image/png;base64,{img_data}" alt="{title}"/>'
                else:
                    img_html = '<div style="height:200px; background:#333; color:white; display:flex; align-items:center; justify-content:center;">Bild fehlt</div>'

                st.markdown(f"""
                <div class="card">
                    {img_html}
                    <div class="card-title">{title}</div>
                    <div class="card-caption">{desc}</div>
                </div>
                """, unsafe_allow_html=True)

                if st.button("Details ansehen", key=f"button_{i}"):
                    st.query_params.update({"page": slug})
                    st.rerun()



elif current_page == "vorhersage":
    st.subheader("√úberlebenschance deines Charakters")
    st.markdown("**Erstelle deinen Charakter und erhalte eine Vorhersage.**")

    model, feature_names = load_model_and_features()

    col1, col2 = st.columns(2)
    with col1:
        male = st.selectbox("Geschlecht", ["M√§nnlich", "Weiblich"]) == "M√§nnlich"
        age = st.slider("Alter", 0, 100, 30)
        is_noble = st.checkbox("Adelig?")
        is_married = st.checkbox("Verheiratet?")
    with col2:
        num_dead_relatives = st.slider("Tote Angeh√∂rige", 0, 20, 0)
        house = st.selectbox("Haus", ["House Stark", "House Lannister", "House Targaryen", "Other"])
        culture = st.selectbox("Kultur", ["Northmen", "Ironborn", "Andals", "Other"])
        allegiance = st.selectbox("Treue zu", ["House Stark", "House Lannister", "House Targaryen", "Other"])
        title = st.selectbox("Titel", ["Ser", "Lord", "Lady", "Maester", "King", "Queen", "Other"])

    input_dict = {
        "male": int(male),
        "age": age,
        "isNoble": int(is_noble),
        "isMarried": int(is_married),
        "numDeadRelations": num_dead_relatives,
    }

    def safe_onehot(prefix, value):
        col = f"{prefix}_{value}"
        return col if col in feature_names else f"{prefix}_Other"

    for cat, val in [("house", house), ("culture", culture), ("allegiances", allegiance), ("title", title)]:
        input_dict[safe_onehot(cat, val)] = 1

    input_df = pd.DataFrame([0] * len(feature_names), index=feature_names).T
    for k, v in input_dict.items():
        if k in input_df.columns:
            input_df[k] = v

    if st.button("√úberlebenschance berechnen"):
        prediction = model.predict(input_df)[0]
        prob = model.predict_proba(input_df)[0]
        st.subheader("Prognose")
        st.markdown(f"**Wahrscheinlichkeit zu √ºberleben:** {prob[1]*100:.1f}%")
        if prediction == 1:
            st.success("Dein Charakter hat gute √úberlebenschancen.")
        else:
            st.error("üíÄ Dein Charakter wird vermutlich nicht √ºberleben.")

elif current_page in slug_to_title:
    title = slug_to_title[current_page]
    st.markdown(f"## {title}")
    st.caption(image_pages[title][1])
    
    # Bild anzeigen
    if image_pages[title][0]:
        show_saved_image(image_pages[title][0])

    # Erweiterte Inhalte je nach Visualisierung
    if title == "Feature Importance":
        importances = model.feature_importances_
        importance_df = pd.DataFrame({
            "Feature": feature_names,
            "Importance": importances
        }).sort_values("Importance", ascending=False)
        st.markdown("**Top-Merkmale nach Bedeutung f√ºr das Modell:**")
        st.dataframe(importance_df.reset_index(drop=True), use_container_width=True)
        st.markdown("""
        Interpretation und kritische Einordnung:
                
        - **`book4`**: Figuren, die im 4. Buch erscheinen, √ºberleben h√§ufiger, evtl. weil sie sp√§t eingef√ºhrt wurden und dadurch weniger Zeit hatten zu sterben (‚Üí m√∂gliches Data Leakage).
        - **`age`**: J√ºngere Charaktere haben offenbar bessere √úberlebenschancen. Vielleicht, weil sie weniger in gef√§hrliche Konflikte verwickelt sind.
        - **`male`, `isNoble`, `numDeadRelations`**: Geschlecht, Adel und tote Verwandte beeinflussen die Prognose. Das kann reale Story-Muster widerspiegeln, birgt aber auch das Risiko, Vorurteile zu √ºbernehmen.
        - **`house_unknown`, `culture_unknown`, `allegiances_unknown`**: Figuren ohne klare Zuordnung wirken oft unwichtiger in der Story und sterben dadurch seltener (weil sie kaum erw√§hnt werden).
        
        **Hinweis**: Feature-Wichtigkeit im Random Forest zeigt *statistische Bedeutung*, nicht *kausalen Einfluss*. 
        """)

    elif title == "Confusion Matrix":
        st.markdown("""
        ### Verteilung der Modell-Fehler und -Treffer (Confusion Matrix)

        Die Matrix zeigt, wie gut das Modell zwischen ‚ÄûTot‚Äú und ‚ÄûLebendig‚Äú unterscheidet:

        - **True Negative (oben links)**: 42 Figuren wurden korrekt als ‚Äûtot‚Äú vorhergesagt.
        - **True Positive (unten rechts)**: 203 Figuren wurden korrekt als ‚Äûlebendig‚Äú erkannt.
        - **False Positive (oben rechts)**: 27 Figuren wurden f√§lschlich als ‚Äûlebendig‚Äú klassifiziert ‚Äì das Modell untersch√§tzt hier das Risiko.
        - **False Negative (unten links)**: 40 Figuren wurden f√§lschlich als ‚Äûtot‚Äú eingestuft ‚Äì das Modell ist hier zu pessimistisch.

        #### Interpretation:
        - Das Modell **erkennt √úberlebende recht zuverl√§ssig** (hohe True-Positive-Zahl).
        - Die Zahl der **False Negatives ist relativ hoch**. Das Modell ‚Äût√∂tet‚Äú also h√§ufiger Charaktere, die eigentlich √ºberleben.
        - Das k√∂nnte an **Verzerrungen in den Daten** liegen (z.‚ÄØB. Figuren mit wenig Infos wirken ‚Äûentbehrlich‚Äú).
                    
        **Fazit**: 
                    
        Das Modell ist deutlich besser bei √úberlebenden. Es erkennt lebdige Figuren recht gut, hat aber Schwierigkeiten, Tote korrekt zu klassifizieren (Recall f√ºr Tote ist schlechter).
        Es vertraut zu stark auf ‚Äûlebendig‚Äú, und macht bei toten Charakteren h√§ufiger Fehler (‚Üí Confusion Matrix zeigt viele False Negatives).
        """)


    elif title == "ROC-Kurve":
        st.markdown("""
        ### ROC-Kurve ‚Äì Modellg√ºte bewerten

        Die **ROC-Kurve (Receiver Operating Characteristic)** bewertet die F√§higkeit des Modells, zwischen ‚Äûlebendig‚Äú und ‚Äûtot‚Äú zu unterscheiden ‚Äì **√ºber alle m√∂glichen Schwellenwerte hinweg**.

        **Achsen:**
        - **x-Achse** = False Positive Rate (f√§lschlich als lebendig erkannt)
        - **y-Achse** = True Positive Rate (korrekt als lebendig erkannt)

        **AUC (Area Under the Curve):**
        - **0.5** ‚Üí Modell r√§t zuf√§llig
        - **1.0** ‚Üí perfekte Trennung zwischen Klassen
        - **Unser Modell: AUC = 0.81** ‚Üí solide Trennsch√§rfe

        ---

        ### Kritische Bewertung

        - Die Kurve liegt deutlich **√ºber der Zufallsdiagonalen** ‚Äì das ist ein gutes Zeichen.
        - Aber: **AUC ignoriert Klassenverteilung** ‚Äì ein gutes AUC bedeutet nicht, dass beide Klassen (z.‚ÄØB. ‚Äûtot‚Äú) gut erkannt werden.
        - AUC allein zeigt **nicht**, wo das Modell Fehler macht (daf√ºr besser: Confusion Matrix).

        **Warum liegt die AUC nicht bei 0.90+?**

        1. **Unvollst√§ndige oder unscharfe Daten:**  
        Viele Nebencharaktere haben l√ºckenhafte Angaben, das erschwert pr√§zise Vorhersagen.

        2. **Korrelation statt Kausalit√§t:**  
        Das Modell erkennt Muster wie ‚Äûmehr Buchauftritte = lebt l√§nger‚Äú, was **statistisch sinnvoll**, aber **inhaltlich fragw√ºrdig** ist.

        3. **Fehlendes Kontextwissen:**  
        Das Modell kennt keine Handlungslogik, Plotstruktur oder Beliebtheit. Entscheidende Einflussfaktoren beim Tod einer Figur.

        **Fazit:**  
        Die ROC-Kurve zeigt, wie gut das Modell **theoretisch trennt**, aber sagt **nichts dar√ºber**, **wo** und **warum** es im Einzelfall scheitert.
        """)



    elif title == "√úberlebenswahrscheinlichkeit Histogramm":
        st.markdown("""
        ### Histogramm der √úberlebenswahrscheinlichkeiten

        Dieses Histogramm zeigt, **wie sicher sich das Modell bei seinen Vorhersagen f√ºhlt**, also:  
        Wie stark tendiert es zur Aussage ‚Äûlebt‚Äú oder ‚Äûstirbt‚Äú?

        #### Interpretation der Achsen:
        - **x-Achse**: vorhergesagte √úberlebenswahrscheinlichkeit (zwischen 0 = sicher tot und 1 = sicher lebendig)
        - **y-Achse**: Anzahl der Figuren mit dieser Wahrscheinlichkeit

        ---

        ### Was f√§llt auf?

        - **Hoher Peak nahe 1.0** ‚Üí Das Modell ist sich bei vielen Charakteren sehr sicher, dass sie **√ºberleben**.
        - **Wenige Vorhersagen bei 0.5** ‚Üí Das Modell trifft **selten unsichere Aussagen**. Das spricht f√ºr gute Trennbarkeit.
        - **Rechtsschiefe Verteilung** ‚Üí Ein Gro√üteil der Charaktere wird mit hoher √úberlebenswahrscheinlichkeit bewertet. Das k√∂nnte entweder:
            - ... ein echter Effekt im Datensatz sein (viele √ºberleben), oder
            - ... eine **Modellverzerrung** durch unbalancierte Klassen (‚Üí siehe Klassenverteilung!).

        ---

        ### Kritische Reflexion

        - Das Modell ‚Äûmeidet‚Äú Mittelf√§lle; das ist gut f√ºr Klarheit, aber gef√§hrlich bei Unsicherheit.
        - Kein perfektes Kalibrierungsma√ü: Es zeigt, wie das Modell **sich selbst einsch√§tzt**, nicht wie gut diese Einsch√§tzung wirklich ist. Daf√ºr br√§uchte man **Calibration Plots**.
        - Wenn fast alle Wahrscheinlichkeiten bei 0 oder 1 liegen, besteht **Gefahr von Overconfidence**.

        **Fazit:**  
        Das Modell trifft klare Aussagen und wirkt optimistisch, aber ohne die Confusion Matrix w√ºrde man verkennen, wie oft das Modell bei den Toten danebenliegt.
        """)

    elif title == "Partial Dependence Plot (PDP)":
        st.markdown("""
        ### Partial Dependence Plot (PDP)

        Der **PDP** zeigt, wie sich **ein einzelnes Merkmal** (z.‚ÄØB. das Alter oder die Anzahl toter Verwandter) **auf die √úberlebenswahrscheinlichkeit auswirkt ‚Äì unabh√§ngig vom Rest der Daten**.

        #### Interpretation der Grafik:
        - **Links: Alter**
            - Die √úberlebenswahrscheinlichkeit **sinkt mit steigendem Alter**.
            - Besonders deutlich: Figuren √ºber 50 haben deutlich schlechtere Prognosen.
            - **Achtung**: Alterswerte wurden per **Median-Imputation** erg√§nzt. Die Aussagekraft bei extremen Alterswerten kann verzerrt sein.
        - **Rechts: Anzahl toter Verwandter**
            - Je mehr tote Verwandte, desto **geringer die √úberlebenschance**.
            - M√∂gliche Erkl√§rung: Viele tote Verwandte = gef√§hrliches Umfeld oder Rolle in konfliktreicher Familie.
        
        #### Kritische Einordnung:
        - Der PDP zeigt **durchschnittliche Effekte**, Extremwerte oder Wechselwirkungen mit anderen Features (z.‚ÄØB. "Alter bei Adeligen") werden nicht ber√ºcksichtigt.
        - Die Interpretation basiert auf **Modellannahmen**, nicht auf kausalen Zusammenh√§ngen.
        - Gerade bei stark korrelierten Variablen (Alter, Buchauftritte) sollte man **zus√§tzliche Plots (z.‚ÄØB. SHAP oder ICE)** zur genaueren Analyse verwenden.

        """)


    elif title == "Kumulative Feature-Wichtigkeit":
        st.markdown("""
        ### Kumulative Feature-Wichtigkeit

        Diese Grafik zeigt, wie viel der Modellleistung durch die **wichtigsten Features** erkl√§rt wird, **aufsummiert** von den st√§rksten bis zu den schw√§chsten.

        #### Interpretation:
        - Die Kurve steigt **anfangs stark an**: Ein **kleiner Teil der Features (z.‚ÄØB. Top 20)** erkl√§rt bereits den Gro√üteil des Modells.
        - Danach flacht sie ab: Zus√§tzliche Features tragen **nur noch marginal** zur Modellleistung bei.

        #### Warum ist das wichtig?
        - Diese Analyse hilft zu erkennen, **wie komplex das Modell tats√§chlich ist**.
        - Man kann daraus ableiten, ob eine **Reduktion der Features** m√∂glich ist; etwa f√ºr ein leichter interpretierbares oder schnelleres Modell.
        
        #### Kritische Bewertung:
        - Diese Darstellung basiert auf der Feature-Wichtigkeit im Random Forest, die **nicht kausal** ist.
        - Feature-Wichtigkeit kann durch **Korrelation** oder **Datendominanz** (z.‚ÄØB. viele Nullwerte bei seltenen Features) verzerrt sein.
        - Besonders bei stark korrelierten Features k√∂nnen **mehrere scheinbar unwichtige Features** gemeinsam Einfluss haben, was hier **nicht sichtbar** ist.

        üëâ **Fazit:** Viele Features im Modell sind formal vorhanden, aber nur wenige dominieren die Entscheidungen. F√ºr robuste Interpretationen sollte man Feature-Reduktion testen und mit SHAP-Werten vergleichen.
        """)


    elif title == "Korrelation zwischen Features":
        st.markdown("""
        ### Korrelation zwischen Features

        Die Korrelationsmatrix zeigt, **wie stark zwei Merkmale miteinander zusammenh√§ngen**.

        - **Rot** steht f√ºr eine starke **positive Korrelation** (z.‚ÄØB. `book1` und `book2`)
        - **Blau** zeigt eine **negative Korrelation** (z.‚ÄØB. `male` und bestimmte Titel)

        #### Beispiel: Starke Korrelation zwischen `book1` und `book2`

        Figuren, die im ersten Buch auftreten (`book1 = 1`), tauchen **sehr h√§ufig auch im zweiten Buch** auf ‚Äì das ist logisch (Seriencharaktere), f√ºhrt aber dazu, dass das Modell diese Features **nicht unabh√§ngig voneinander** bewertet. Sie tragen **redundante Information**.

        #### Was bedeutet das f√ºr unser Modell?

        - **Hohe Korrelation = m√∂gliche Redundanz**  
        Wenn zwei Features sehr √§hnlich sind, liefern sie dem Modell oft keine zus√§tzliche Information. Das kann zu **Overfitting** f√ºhren.
        
        - **Multikollinearit√§t kann Modellinterpretation verzerren**  
        Bei stark korrelierten Features ist es schwer zu sagen, **welches Merkmal wirklich entscheidend** ist. Feature Importance ist dann ggf. schwer zu deuten.

        - **Einfluss auf PDP & SHAP**  
        Starke Korrelationen k√∂nnen die **Interpretierbarkeit einzelner Merkmale verzerren**, da ein Feature vielleicht nur wichtig erscheint, weil es stark mit einem anderen verbunden ist.

        """)


    elif title == "Beispielbaum aus dem Random Forest":
        st.markdown("""
        ### Beispielbaum aus dem Random Forest

        Diese Visualisierung zeigt **einen einzigen Entscheidungsbaum**, wie er im Random Forest verwendet wird.

        #### Was sieht man hier?
        - **Split-Kriterien**: z.‚ÄØB. `culture_Rivermen <= 0.5`, `book2`, `title_Lady`
        - **Entscheidungslogik**: Welche Bedingungen f√ºhren zu einer Vorhersage ‚Äûlebt‚Äú oder ‚Äûtot‚Äú?
        - **Anzahl Samples** im Knoten und **Verh√§ltnis lebt/tot**
        - **Gini-Wert** als Ma√ü f√ºr Reinheit (je kleiner, desto eindeutiger)

        #### Beispielhafte Pfade:
        - **culture_Rivermen = True ‚Üí lebt mit hoher Wahrscheinlichkeit nicht**
        - **Nicht Rivermen + kein Lady-Titel + Buch2 vorhanden ‚Üí √úberlebenschance hoch**

        #### Kritische Einordnung:
        - Der gezeigte Baum ist **nur ein Beispiel**. Ein Random Forest besteht aus vielen solcher B√§ume.
        - Der Baum ist **leicht interpretierbar**, aber **repr√§sentiert nicht das ganze Modell**.
        - Die Entscheidungslogik kann helfen, **implizite Regeln im Modell zu verstehen**, ist aber **kein Beweis f√ºr Kausalit√§t**.
        """)



    elif title == "Charaktertypen (Cluster)":
        st.markdown("""
        ### Charaktertypen (Cluster)

        Hier wurden Figuren anhand ihrer Eigenschaften automatisch zu **Gruppen (Clustern)** zusammengefasst.

        - **Clustering**: Figuren mit √§hnlichen Attributen (z.‚ÄØB. Geschlecht, Adel, Haus, Buchauftritte) werden in Gruppen eingeordnet.
        - **Farben**: zeigen unterschiedliche Cluster (z.‚ÄØB. "junge Adelige", "alte Nebenfiguren", "aktive K√§mpfer").
        - **Positionen**: sind auf 2 Dimensionen reduziert, basierend auf einer **Hauptkomponentenanalyse (PCA)** oder einer **t-SNE**-Reduktion. Sie geben ein visuelles Gef√ºhl f√ºr die √Ñhnlichkeit der Figuren.

        #### Interpretation:
        - Cluster liegen **nah beieinander**, wenn Figuren **√§hnliche Eigenschaften** teilen.
        - **Trennung zwischen Clustern** kann auf klar unterscheidbare Gruppen hinweisen.
        - Die Methode hilft, **verborgene Muster oder Gruppen** im Datensatz zu entdecken.

        #### Kritische Einordnung:
        - Die x- und y-Achsen haben **keine inhaltliche Bedeutung** ‚Äì sie ergeben sich rein aus der Reduktion.
        - Die Methode ist **explorativ**, d.‚ÄØh. sie zeigt interessante Muster, die aber **nicht automatisch kausale Gruppen** darstellen.
        """)


    elif title == "Klassenverteilung":
        st.markdown("""
        ### Klassenverteilung: Lebendig vs. Tot

        Diese Grafik zeigt, wie **unausgeglichen** die Daten im Trainingsdatensatz sind:

        - Deutlich mehr Figuren sind **am Leben** (`1`) als gestorben (`0`).
        - Das f√ºhrt zu einer **Klassenungleichheit**, bei der das Modell leicht bevorzugt, die h√§ufigere Klasse (‚Äûlebt‚Äú) vorherzusagen.

        #### Warum ist das problematisch?
        - **Verzerrte Vorhersagen**: Ein Modell kann eine hohe Gesamtgenauigkeit haben, **obwohl** es z.‚ÄØB. fast nie ‚Äûtot‚Äú vorhersagt.
        - **Vernachl√§ssigte Minderheitsklasse**: Seltenere Klassen (z.‚ÄØB. ‚Äûtot‚Äú) werden schlechter gelernt.

        #### L√∂sung: SMOTE
        - Mit **SMOTE (Synthetic Minority Over-sampling Technique)** wird die kleinere Klasse synthetisch erg√§nzt.
        - Ziel: **Balanciertes Lernen**, bessere Erkennung beider Klassen und robustere Vorhersagen.

        """)


    elif title == "√úberleben nach Geschlecht":
        st.markdown("""
        ### √úberleben nach Geschlecht ‚Äì Was erkennt das Modell?

        Dieses Balkendiagramm zeigt den Anteil √ºberlebender Figuren nach Geschlecht.
        - **0 = weiblich**, **1 = m√§nnlich**
        - Weibliche Charaktere √ºberleben laut Modell **h√§ufiger** als m√§nnliche.

        #### Interpretation:
        - Der Unterschied ist statistisch signifikant, aber **nicht extrem**.
        - Das Modell erkennt Muster wie: *"Weibliche Figuren √ºberleben √∂fter."*

        #### Kritische Bewertung:
        - **Achtung vor Schein-Kausalit√§t**: Das Modell erkennt **Korrelation**, nicht Ursache. 
        - Der Unterschied k√∂nnte auf **Storyrollen** beruhen (z.‚ÄØB. M√§nner k√§mpfen √∂fter).
        - **Bias-Gefahr**: Gesellschaftliche Stereotype aus der Story k√∂nnten unkritisch √ºbernommen werden.
        - **Modelltransparenz**: Ohne SHAP oder PDP ist unklar, wie **stark** das Merkmal wirklich wirkt.

        Das Feature ‚ÄûGeschlecht‚Äú liefert also Hinweise, sollte aber **nicht isoliert interpretiert** werden.
        """)


    elif title == "√úberleben nach Adel":
        st.markdown("""
        ### √úberleben nach Adel ‚Äì Was sagt das Modell?

        Diese Grafik zeigt, ob Figuren mit Adelstitel (isNoble = 1) laut Modell eher √ºberleben als nicht-adelige Figuren (isNoble = 0).

        #### Interpretation:
        - Der Unterschied ist **leicht erkennbar**, aber **nicht sehr stark**.
        - **Nicht-adelige Figuren** scheinen im Schnitt **etwas h√∂here √úberlebensraten** zu haben.

        #### Kritische Bewertung:
        - **Scheinbar paradoxer Effekt**: Adelige werden im Plot oft als zentrale Figuren dargestellt, aber eben auch als Zielscheiben politischer Intrigen.
        - Das Modell erkennt keine "Macht" oder "Plotrelevanz", sondern nur Korrelationen und die deuten hier **keinen klaren Vorteil f√ºr Adelige** an.
        - **Feature-Bias m√∂glich**: Vielleicht h√§ngt das Ergebnis mit anderen Merkmalen zusammen (z.‚ÄØB. ‚ÄûAdelige sind h√§ufiger M√§nner und sterben √∂fter‚Äú).
        - **Fehlende Kausalit√§t**: Nur weil jemand adelig ist, ‚Äûverursacht‚Äú das kein √úberleben oder Sterben.

        Fazit: Der Adelstitel hat **nur begrenzt Aussagekraft** und sollte nie isoliert interpretiert werden.
        """)


    elif title == "√úberleben Heirat":
        st.markdown("""
        ### √úberleben in Abh√§ngigkeit vom Familienstand

        Diese Grafik zeigt, ob es einen Zusammenhang zwischen dem Merkmal **`isMarried`** und der √úberlebenswahrscheinlichkeit von Charakteren gibt.

        #### Interpretation:
        - **Unverheiratete Figuren (0)** haben in diesem Datensatz eine **leicht h√∂here √úberlebensrate**.
        - **Verheiratete Charaktere (1)** √ºberleben statistisch seltener.

        #### M√∂gliche Erkl√§rungen:
        - **Plot-Mechanik**: Verheiratete Figuren k√∂nnten narrativ eher Zielscheibe von Konflikten oder dramatischen Wendungen sein (z.‚ÄØB. politische Ehen, Rachemotive).
        - **Verzerrung durch Nebenfiguren**: Viele unverheiratete Figuren k√∂nnten einfache, wenig involvierte Nebenrollen mit geringem Sterberisiko sein.
        - **Kulturelle Muster**: In GoT sind verheiratete Figuren oft in zentrale Familienkonflikte oder Machtspiele verwickelt, das k√∂nnte ein Risiko darstellen.

        > Fazit: Die Differenz ist **relativ gering**, aber statistisch erkennbar. Ob Heirat kausal zu h√∂herem Risiko f√ºhrt, l√§sst sich **nicht** direkt sagen. Die Grafik zeigt nur einen **Trend**, keine Ursache.
        """)


    elif title == "√úberleben nach Alter (Histogramm)":
        st.markdown("""
        ### Altersverteilung bei √úberlebenden und Toten

        Diese Visualisierung zeigt, wie sich das **Alter** bei √ºberlebenden und gestorbenen Figuren verteilt. Damit l√§sst sich z.‚ÄØB. untersuchen, ob **j√ºngere Charaktere h√§ufiger √ºberleben**.

        **Auff√§llig ist der starke Peak um 25 Jahre**. Dieser entsteht, weil **fehlende Altersangaben im Datensatz mit dem Median ersetzt** wurden.

        #### Interpretation:

        - Figuren ohne Altersangabe wurden auf den **Medianwert gesetzt**, was zu einer **k√ºnstlichen H√§ufung** in der Mitte f√ºhrt.
        - Das erschwert die Bewertung echter Zusammenh√§nge, etwa ob sehr junge oder sehr alte Charaktere bessere √úberlebenschancen haben.
        - Trotzdem l√§sst sich erkennen, dass Figuren **au√üerhalb des Medianbereichs (besonders ganz jung oder alt)** teils schlechter abschneiden.
        
        > Hinweis: Das Modell kann durch die Median-F√ºllung gewisse **Alterseffekte untersch√§tzen oder falsch deuten**.
    """)


    elif title == "√úberleben toter Verwandter":
        st.markdown("""
        ### √úberleben in Abh√§ngigkeit von toten Verwandten

        Diese Analyse untersucht den Zusammenhang zwischen dem Merkmal **`has_dead_relatives`** und der √úberlebensrate von Charakteren.

        #### Interpretation:
        - Charaktere **ohne tote Verwandte** (0) haben eine signifikant **h√∂here √úberlebensrate**.
        - Figuren mit **toten Verwandten** (1) sterben statistisch **h√§ufiger**.

        #### M√∂gliche Gr√ºnde:
        - **Story-Kontext**: Familienkonflikte, Rachegeschichten oder Blutfehden k√∂nnten eine h√∂here Gefahr f√ºr Figuren mit toten Verwandten bedeuten.
        - **Datenabh√§ngigkeit**: Das Feature basiert auf vorhandenen Stammbaumdaten. Nebencharaktere ohne dokumentierte Familie erscheinen hier eventuell verzerrt.
        - **Fehlende Tiefe**: Das Feature unterscheidet nicht zwischen Anzahl, N√§he oder Bedeutung der toten Verwandten. Ein toter Cousin z√§hlt genauso wie ein ermordetes Elternteil.

        > Fazit: Das Modell erkennt einen Zusammenhang, aber **ohne inhaltliches Verst√§ndnis** f√ºr famili√§re Beziehungen bleibt es eine **statistische Korrelation ohne Kontext**.
        """)

    elif title == "Einf√ºhrungskapitel vs. √úberleben":
        st.markdown("""
        ### Interpretation: Einf√ºhrungskapitel vs. √úberleben

        Dieser Boxplot zeigt, **in welchem Kapitel** eine Figur eingef√ºhrt wurde, getrennt nach √úberlebensstatus.

        #### Beobachtungen:
        - **Fr√ºh eingef√ºhrte Figuren (niedriges Kapitel)** sterben deutlich h√§ufiger.
        - **Sp√§t eingef√ºhrte Figuren** haben h√∂here √úberlebenschancen; viele leben sogar bis zum Schluss.
        - Die **Verteilung ist bei Toten breiter**, bei Lebenden kompakter.
        - Es gibt viele **Ausrei√üer bei den Lebenden**, z.‚ÄØB. Nebenfiguren, die erst sp√§t erscheinen.

        #### Kritische Bewertung:
        - Das Modell nutzt hier ein **Erz√§hlmuster**: Wer fr√ºh eingef√ºhrt wird, ist √∂fter Hauptfigur und stirbt eher im Lauf der Handlung.
        - Das ist **kein echter kausaler Zusammenhang**, sondern ein **narrativer Effekt**.
        - Vorsicht: Dieses Feature kann zu **Data Leakage** f√ºhren, weil es **implizit den Handlungsverlauf** der B√ºcher abbildet.
        
        #### Fazit:
        Das Modell erkennt: *‚ÄûFr√ºhe Einf√ºhrung = h√∂heres Risiko‚Äú*; das ist plausibel, aber kein sachlicher Grund. Deshalb ist **kontextkritische Bewertung wichtig.**
        """)

    elif title == "√úberleben nach Haus":
        st.markdown("""
        ### √úberlebensraten nach Hauszugeh√∂rigkeit

        Dieses Balkendiagramm zeigt, **wie gro√ü der Anteil √ºberlebender Figuren** je nach Haus ist.

        #### Interpretation:
        - **House Frey** und **House Stark** zeigen relativ hohe √úberlebensraten ‚Äì √ºberraschend, da beide H√§user im Plot viele Todesf√§lle aufweisen.
        - **House Targaryen** hat eine auff√§llig **niedrige √úberlebensrate** ‚Äì k√∂nnte an der hohen Plot-Relevanz und Risikoposition ihrer Mitglieder liegen.
        - **‚Äûunknown‚Äú** und **‚ÄûOther‚Äú** zeigen hohe √úberlebensraten ‚Äì das sind oft **Nebenfiguren ohne gro√üe Handlung**, die schlicht nicht get√∂tet wurden.

        #### Kritische Bewertung:
        - Die Balken zeigen **Mittelwerte mit Unsicherheitsintervallen** ‚Äì bei kleinen H√§usern (z.‚ÄØB. Targaryen) ist die Aussage **weniger stabil**.
        - Die Hauszugeh√∂rigkeit ist ein **Proxy-Feature** f√ºr narrative Wichtigkeit ‚Äì es sagt oft mehr √ºber Plotrollen als √ºber reale √úberlebensmuster.
        - Auch die Kategorie **‚ÄûOther‚Äú** enth√§lt verschiedene H√§user ‚Äì Interpretation mit Vorsicht!

        #### Fazit:
        Die Hauszugeh√∂rigkeit beeinflusst die √úberlebenswahrscheinlichkeit ‚Äì **aber nicht kausal**, sondern oft **indirekt √ºber narrative Rollen und Screentime**.
        """)

    elif title == "t-SNE Tot vs. Lebendig":
        st.markdown("""
        ### t-SNE Visualisierung: Tot vs. Lebendig

        Diese Darstellung zeigt Figuren in einer **reduzierten 2D-Darstellung** ihrer Eigenschaften (t-SNE). Jede Figur ist ein Punkt, eingef√§rbt nach √úberlebensstatus:
        - **Rot = tot**
        - **Blau = lebt**

        #### Interpretation:
        - Die Punkte gruppieren sich **nach √Ñhnlichkeiten in den Eingabemerkmalen**. Figuren mit √§hnlichem Profil liegen r√§umlich beieinander.
        - Die Farbverteilung ist **nicht klar getrennt**: Es gibt **viele durchmischte Bereiche**, in denen sowohl Tote als auch Lebende vorkommen.
        - Einige **Cluster sind farblich dominanter** (z.‚ÄØB. rein rot oder rein blau). Dort erkennt das Modell m√∂glicherweise klarere Muster.

        #### Kritische Bewertung:
        - t-SNE zeigt **nur relative √Ñhnlichkeiten**, aber keine absolute Trennsch√§rfe.
        - Es kann sein, dass Figuren **aus dem gleichen Plotstrang** oder mit √§hnlichem Alter/Geschlecht/Haus automatisch in Gruppen landen, ohne dass ein echter Zusammenhang zur √úberlebenswahrscheinlichkeit besteht.
        - Dennoch ist es ein **visuelles Indiz**, ob sich Klassen trennen lassen oder **stark √ºberlappen**.
        """)

# === Sidebar Navigation ===
st.sidebar.markdown("## Schnellauswahl")

# Aktuelle Seite aus den Query-Params ermitteln
current_slug = st.query_params.get("page", "start")
if isinstance(current_slug, list):
    current_slug = current_slug[0]

# Den zur aktuellen Seite passenden Titel finden
selected_title = slug_to_title.get(current_slug, "Start")

# Seitenliste in der gew√ºnschten Reihenfolge
seitenliste = ["Start", "√úberlebenschance"] + list(image_pages.keys())

# Selectbox anzeigen mit dem aktuell ausgew√§hlten Titel
sidebar_choice = st.sidebar.selectbox("Seite", seitenliste, index=seitenliste.index(selected_title))

# Nur rerun ausl√∂sen, wenn sich die Auswahl aktiv ge√§ndert hat
if sidebar_choice == "Start" and current_slug != "start":
    st.query_params.clear()
    st.rerun()
elif sidebar_choice == "√úberlebenschance" and current_slug != "vorhersage":
    st.query_params.update({"page": "vorhersage"})
    st.rerun()
elif sidebar_choice != selected_title:
    st.query_params.update({"page": title_to_slug[sidebar_choice]})
    st.rerun()
